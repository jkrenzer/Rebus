/**************************** -*- c++ -*- **************************************
 *              This file is distributed as part of Rebus                      *
 *                (https://github.com/jmankiewicz/rebus)                       *
 *                                                                             *
 * Rebus is free software and is licensed  under the GNU Lesser General Public *
 * License version 3 published by the Free Software Foundation.                *
 *                                                                             *
 * We hope that Rebus is useful for you but please keep in mind that this      *
 * software is distributed WITHOUT ANY WARRANTY OF ANY KIND. By using Rebus    *
 * you agree to the aforementioned licensing terms.                            *
 *                                                                             *
 * You should have received a copy of the GNU Lesser General Public License    *
 * version 3 along with this software. If not, please refer to                 *
 * <http://www.gnu.org/licenses/> to obtain a copy of the license.             *
 *                                                                             *
 *  Copyright (C) 2017 JÃ¶rn Mankiewicz                                         *
 ******************************************************************************/


#ifndef EXCEPTION_HPP
#define EXCEPTION_HPP

#include <exception>
#include <string>

namespace Rebus
{
    namespace Exception
    {
        class Exception : public std::exception
        {
        protected:
            
            std::string message;
            std::string description;
            std::string fileName;
            int lineNumber;
            
        public:
            
            explicit Exception(const char* message) : message(message), fileName(), lineNumber(-1), description(std::string("N/A"))
            {}
            
            explicit Exception(const std::string& message) : message(message), fileName(), lineNumber(-1), description(std::string("N/A"))
            {}
            
            explicit Exception(std::string& fileName, int lineNumber, const std::string& message, const std::string& description=std::string("N/A")) : message(message), fileName(fileName), lineNumber(lineNumber), description(description)
            {}
            
            virtual ~Exception() throw()
            {}
            
            virtual const char* what() const throw()
            {
                return message.c_str();
            }
            
            virtual const char* file() const throw()
            {
                return fileName.c_str();
            }
            
            virtual const char* description() const throw()
            {
                return description.c_str();
            }
            
            virtual const int line() const throw()
            {
                return lineNumber;
            }
            
        };
        
        std::string getErrorMessage(Exception& e)
        {
            return std::string("[") + std::string(e.file()) + std::string(":") + std::string(e.line()) + std::string("] ") + std::string(e.what());
        }
        
        std::string getErrorReport(Exception& e)
        {
            return std::string("[") + std::string(e.file()) + std::string(":") + std::string(e.line()) + std::string("] ") + std::string(e.what() + std::string("\n" + std::string(e.description)));
        }
    }
}

/* Preprocessor macros */

#define RebusThrow(exc, ...) throw(exc(__FILE__,__LINE__,__VA_ARGS__))

#endif
