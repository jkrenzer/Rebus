/**************************** -*- c++ -*- **************************************
 *              This file is distributed as part of Rebus                      *
 *                (https://github.com/jmankiewicz/rebus)                       *
 *                                                                             *
 * Rebus is free software and is licensed  under the GNU Lesser General Public *
 * License version 3 published by the Free Software Foundation.                *
 *                                                                             *
 * We hope that Rebus is useful for you but please keep in mind that this      *
 * software is distributed WITHOUT ANY WARRANTY OF ANY KIND. By using Rebus    *
 * you agree to the aforementioned licensing terms.                            *
 *                                                                             *
 * You should have received a copy of the GNU Lesser General Public License    *
 * version 3 along with this software. If not, please refer to                 *
 * <http://www.gnu.org/licenses/> to obtain a copy of the license.             *
 *                                                                             *
 *  Copyright (C) 2017 JÃ¶rn Mankiewicz                                         *
 ******************************************************************************/

#ifndef TRAITS_HPP
#define TRAITS_HPP

#include <iostream>
#include <string>
#include <typeinfo>

#include <Rebus/Exception>

namespace Rebus
{
    /**
     * @brief Namespace containing all Rebus-Type related stuff.
     */
    namespace Type
    {
        /**
         * @brief Interface-class for type-traits
         */
        class Traits
        {
        public:
            /**
             * @brief Retrieve library-scope name of the type
             * 
             * @returns std::string with name
             */
            virtual std::string name() = 0;
            
            /**
             * @brief Get library-scope description of the type
             * 
             * @returns std::string with description
             */
            virtual std::string description() = 0;
        };
        
        /**
         * @brief Template-implementation of the Traits-class for all types.
         * 
         * @see Traits
         */
        template <class T>
        class Traits : public Interface
        {};
    }
}

#endif
